# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ph5mH-PlirnzeSGnPXSQ4sBUK8-AUxCT
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from matplotlib.colors import ListedColormap

from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier

train = pd.read_csv ('/content/data_inlf_train.csv')

test = pd.read_csv ('/content/data_inlf_test.csv')

y = train['inlf']


x = train.drop(columns= 'inlf')


x.shape

y.shape

sc = StandardScaler()
sc.fit(x)
X_train_std = sc.transform(x)
X_test_std = sc.transform(test)


lr = LogisticRegression(C=100, solver='lbfgs', multi_class='ovr')
lr.fit(X_train_std, y)

y_pred = lr.predict(X_test_std)


lr.predict(X_test_std)

Competencia = pd.DataFrame(data= y_pred, columns = ['Expected']). reset_index().rename(columns = {'index': 'id'})


Competencia. to_csv ('competencia.csv', index =False)

from sklearn.experimental import enable_halving_search_cv
import pandas as pd
import scipy
import matplotlib.pyplot as plt
import numpy as np

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler

from sklearn.decomposition import PCA
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC

from sklearn.pipeline import make_pipeline

from sklearn.model_selection import train_test_split
from sklearn.model_selection import learning_curve
from sklearn.model_selection import validation_curve

from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import HalvingRandomSearchCV
from sklearn.model_selection import RandomizedSearchCV

knn = KNeighborsClassifier(n_neighbors=5, p=2,
                          metric='minkowski')
knn.fit(X_train_std, y)

y_pred = knn.predict(test)

Competencia = pd.DataFrame(data= y_pred, columns = ['Expected']). reset_index().rename(columns = {'index': 'id'})

Competencia. to_csv ('competencia.csv', index =False)

pipe_svc = make_pipeline(StandardScaler(), KNeighborsClassifier())


param_grid = {'kneighborsclassifier__n_neighbors': [500],
             "kneighborsclassifier__metric":["euclidean","manhattan","minkowski"] }
rs = RandomizedSearchCV(estimator=pipe_svc,
      param_distributions=param_grid,
      scoring='accuracy',
      refit=True,
      n_iter=20,
      cv=10,
      random_state=1,
      n_jobs=-1)


rs.fit(x,y)

y_pred = rs.predict(test)


competencia = pd.DataFrame(data= y_pred, columns = ['Expected']). reset_index().rename(columns = {'index': 'id'})


competencia. to_csv ('competencia.csv', index =False)

ka_svc = make_pipeline(StandardScaler(), SVC(random_state=1))


param_range = [10000]


param_grid = [{'svc__C': param_range,
      'svc__kernel': ['linear']},
      {'svc__C': param_range,
      'svc__gamma': param_range,
      'svc__kernel': ['rbf']}]


hs = HalvingRandomSearchCV(ka_svc,
    param_distributions=param_grid,
    n_candidates='exhaust',
    resource='n_samples',
    factor=1.5,
    random_state=1,
    n_jobs=-1)


hs.fit(x,y)

hs.predict(test)

y_pred = hs.predict(test)


competencia = pd.DataFrame(data= y_pred, columns = ['Expected']). reset_index().rename(columns = {'index': 'id'})


competencia. to_csv ('competencia.csv', index =False)

